package coord

import (
	"math"
)

const (
	dc = 3e3
	ec = 2.0e-5
	fc = 3.0e-6
	gc = math.Pi / 180
	hc = 0.0065
	ic = 0.0060
)

// GCJ02toBD09 火星坐标系->百度坐标系
// 源函数: qc
func GCJ02toBD09(p *Point) *Point {
	b, c := p.Lng, p.Lat
	a := math.Sqrt(b*b+c*c) + math.Sin(c*dc*gc)*ec
	b = math.Atan2(c, b) + math.Cos(b*dc*gc)*fc
	return &Point{
		Lng: a*math.Cos(b) + hc,
		Lat: a*math.Sin(b) + ic,
	}
}

// BD09toGCJ02 百度坐标系->火星坐标系
//
//	源函数: BC
func BD09toGCJ02(p *Point) *Point {
	var b, c = p.Lng - hc, p.Lat - ic
	d := math.Sqrt(b*b+c*c) - math.Sin(c*dc*gc)*ec
	b = math.Atan2(c, b) - math.Cos(b*dc*gc)*fc
	return &Point{
		Lng: d * math.Cos(b),
		Lat: d * math.Sin(b),
	}
}

var (
	// CP = 6370996.81 // 地球半径 m
	jg = []float64{1.289059486e7, 8362377.87, 5591021, 3481989.83, 1678043.12, 0}
	lu = []float64{75, 60, 45, 30, 15, 0}
	ip = [][]float64{
		{1.410526172116255e-8, 8.98305509648872e-6, -1.9939833816331, 200.9824383106796, -187.2403703815547, 91.6087516669843, -23.38765649603339, 2.57121317296198, -0.03801003308653, 1.73379812e7},
		{-7.435856389565537e-9, 8.983055097726239e-6, -0.78625201886289, 96.32687599759846, -1.85204757529826, -59.36935905485877, 47.40033549296737, -16.50741931063887, 2.28786674699375, 1.026014486e7},
		{-3.030883460898826e-8, 8.98305509983578e-6, 0.30071316287616, 59.74293618442277, 7.357984074871, -25.38371002664745, 13.45380521110908, -3.29883767235584, 0.32710905363475, 6856817.37},
		{-1.981981304930552e-8, 8.983055099779535e-6, 0.03278182852591, 40.31678527705744, 0.65659298677277, -4.44255534477492, 0.85341911805263, 0.12923347998204, -0.04625736007561, 4482777.06},
		{3.09191371068437e-9, 8.983055096812155e-6, 6.995724062e-5, 23.10934304144901, -2.3663490511e-4, -0.6321817810242, -0.00663494467273, 0.03430082397953, -0.00466043876332, 2555164.4},
		{2.890871144776878e-9, 8.983055095805407e-6, -3.068298e-8, 7.47137025468032, -3.53937994e-6, -0.02145144861037, -1.234426596e-5, 1.0322952773e-4, -3.23890364e-6, 826088.5},
	}
	gg = [][]float64{
		{-0.0015702102444, 111320.7020616939, 1704480524535203, -10338987376042340, 26112667856603880, -35149669176653700, 26595700718403920, -10725012454188240, 1800819912950474, 82.5},
		{8.277824516172526e-4, 111320.7020463578, 6.477955746671607e8, -4.082003173641316e9, 1.077490566351142e10, -1.517187553151559e10, 1.205306533862167e10, -5.124939663577472e9, 9.133119359512032e8, 67.5},
		{0.00337398766765, 111320.7020202162, 4481351.045890365, -2.339375119931662e7, 7.968221547186455e7, -1.159649932797253e8, 9.723671115602145e7, -4.366194633752821e7, 8477230.501135234, 52.5},
		{0.00220636496208, 111320.7020209128, 51751.86112841131, 3796837.749470245, 992013.7397791013, -1221952.21711287, 1340652.697009075, -620943.6990984312, 144416.9293806241, 37.5},
		{-3.441963504368392e-4, 111320.7020576856, 278.2353980772752, 2485758.690035394, 6070.750963243378, 54821.18345352118, 9540.606633304236, -2710.55326746645, 1405.483844121726, 22.5},
		{-3.218135878613132e-4, 111320.7020701615, 0.00369383431289, 823725.6402795718, 0.46104986909093, 2351.343141331292, 1.58060784298199, 8.77738589078284, 0.37238884252424, 7.45},
	}
)

// 源函数: T.GK
func gK(p *Point, b []float64) Point {
	c := b[0] + b[1]*math.Abs(p.Lng)
	d := math.Abs(p.Lat) / b[9]
	d = b[2] +
		b[3]*d +
		b[4]*d*d +
		b[5]*d*d*d +
		b[6]*d*d*d*d +
		b[7]*d*d*d*d*d +
		b[8]*d*d*d*d*d*d
	var tn, tt float64 = 1, 1
	if p.Lat < 0 {
		tt = -1
	}
	if p.Lng < 0 {
		tn = -1
	}
	c = c * tn
	d = d * tt
	return Point{Lng: c, Lat: d}
}

// gE 获取最大值
// 源函数: T.gE
func gE(a, b, c float64) float64 {
	a = math.Max(a, b)
	a = math.Min(a, c)
	return a
}

// cE 获取 a
// 源函数: T.cE
func cE(a, b, c float64) float64 {
	for a > c {
		a -= c - b
	}
	for a < b {
		a += c - b
	}
	return a
}

// DB09MctoBD09 百度墨卡托坐标系 - > 百度坐标系
// 原函数: T.ub
func DB09MctoBD09(p *Point) Point {
	var c []float64
	b := Point{Lng: math.Abs(p.Lng), Lat: math.Abs(p.Lat)}
	for i, v := range jg {
		if b.Lat >= v {
			c = ip[i]
			break
		}
	}
	return gK(p, c)
}

// BD09toBD09MC 百度坐标系-> 百度墨卡托坐标系
// 源函数: T.tb
func BD09toBD09MC(p *Point) Point {
	if 180 < p.Lng || -180 > p.Lng || 90 < p.Lat || -90 > p.Lat {
		return Point{Lng: 0, Lat: 0}
	}
	var c []float64
	p.Lng = cE(p.Lng, -180, 180)
	p.Lat = gE(p.Lat, -74, 74)

	for i, v := range lu {
		if p.Lat >= v {
			c = gg[i]
			break
		}
	}

	for i, v := range lu {
		if p.Lat <= -v {
			c = gg[i]
			break
		}
	}

	return gK(p, c)
}
