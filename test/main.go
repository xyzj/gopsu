package main

import (
	"encoding/json"
	"fmt"
	"strings"
	"sync"
	"unicode"

	"github.com/xyzj/gopsu"
	"github.com/xyzj/gopsu/coord"
)

// 结构定义
// 设备型号信息
type devmod struct {
	ID     string `json:"id,omitempty"`
	Name   string `json:"name,omitempty"`
	Sys    string `json:"-"`
	Remark string `json:"remark,omitempty"`
	pinyin string
}

func (d devmod) DoNoting() {
}

type BaseMap struct {
	sync.RWMutex
	data map[string]string
}

func FormatMQBody(d []byte) string {
	if json.Valid(d) {
		return gopsu.String(d)
	}
	return strings.Map(func(r rune) rune {
		if unicode.IsPrint(r) {
			return r
		}
		return -1
	}, gopsu.String(d))
	// return base64.StdEncoding.EncodeToString(d)
}
func main() {
	x := 117.26966769059439
	y := 31.85699760600352

	z := coord.ToMercator(coord.BD09toWGS84(&coord.Point{
		Lng: x,
		Lat: y,
	}))
	println(coord.BD09toWGS84(&coord.Point{
		Lng: x,
		Lat: y,
	}).GeoText(), z.GeoText())
	a := `13055693.148419775 3747727.438902212, 13055688.241652342 3747727.559356591, 13055683.346705742 3747727.9204295445, 13055678.47537233 3747728.521251215, 13055673.639387574 3747729.3603741713, 13055668.850401785 3747730.4357768926, 13055664.11995205 3747731.7448686385, 13055659.459434437 3747733.2844956936, 13055654.880076539 3747735.0509489607, 13055650.392910432 3747737.0399728995, 13055646.008746093 3747739.246775777, 13055641.738145355 3747741.6660412117, 13055637.591396473 3747744.2919409815, 13055633.578489326 3747747.1181490635, 13055629.709091358 3747750.1378568755, 13055625.99252429 3747753.343789676, 13055622.437741656 3747756.728224093, 13055619.053307239 3747760.283006727, 13055615.84737444 3747763.9995737956, 13055612.827666627 3747767.8689717627, 13055610.001458544 3747771.8818789097, 13055607.375558775 3747776.0286277924, 13055604.95629334 3747780.2992285294, 13055602.749490462 3747784.683392869, 13055600.760466523 3747789.1705589755, 13055598.994013257 3747793.7499168725, 13055597.454386203 3747798.4104344863, 13055596.145294456 3747803.1408842215, 13055595.069891734 3747807.9298700104, 13055594.23076878 3747812.765854766, 13055593.629947107 3747817.637188179, 13055593.268874155 3747822.5321347793, 13055593.148419775 3747827.438902212, 13055593.629947107 3747837.2406162447, 13055594.23076878 3747842.1119496576, 13055595.069891734 3747846.9479344133, 13055596.145294456 3747851.736920202, 13055597.454386203 3747856.4673699373, 13055598.994013257 3747861.127887551, 13055600.760466523 3747865.707245448, 13055602.749490462 3747870.194411555, 13055604.95629334 3747874.5785758942, 13055607.375558775 3747878.8491766313, 13055610.001458544 3747882.995925514, 13055612.827666627 3747887.008832661, 13055615.84737444 3747890.878230628, 13055619.053307239 3747894.5947976965, 13055622.437741656 3747898.1495803306, 13055625.99252429 3747901.5340147475, 13055629.709091358 3747904.739947548, 13055633.578489326 3747907.75965536, 13055637.591396473 3747910.585863442, 13055641.738145355 3747913.211763212, 13055646.008746093 3747915.6310286466, 13055650.392910432 3747917.837831524, 13055654.880076539 3747919.826855463, 13055659.459434437 3747921.59330873, 13055664.11995205 3747923.132935785, 13055668.850401785 3747924.442027531, 13055673.639387574 3747925.5174302524, 13055678.47537233 3747926.3565532085, 13055683.346705742 3747926.957374879, 13055688.241652342 3747927.3184478325, 13055693.148419775 3747927.438902212, 13055698.055187209 3747927.3184478325, 13055702.950133808 3747926.957374879, 13055707.82146722 3747926.3565532085, 13055712.657451976 3747925.5174302524, 13055717.446437765 3747924.442027531, 13055722.176887501 3747923.132935785, 13055726.837405114 3747921.59330873, 13055731.416763011 3747919.826855463, 13055735.903929118 3747917.837831524, 13055740.288093457 3747915.6310286466, 13055744.558694195 3747913.211763212, 13055748.705443077 3747910.585863442, 13055752.718350224 3747907.75965536, 13055756.587748192 3747904.739947548, 13055760.30431526 3747901.5340147475, 13055763.859097894 3747898.1495803306, 13055767.243532311 3747894.5947976965, 13055770.44946511 3747890.878230628, 13055773.469172923 3747887.008832661, 13055776.295381006 3747882.995925514, 13055778.921280775 3747878.8491766313, 13055781.34054621 3747874.5785758942, 13055783.547349088 3747870.194411555, 13055785.536373027 3747865.707245448, 13055787.302826293 3747861.127887551, 13055788.842453348 3747856.4673699373, 13055790.151545094 3747851.736920202, 13055791.226947816 3747846.9479344133, 13055792.06607077 3747842.1119496576, 13055792.666892443 3747837.2406162447, 13055793.027965395 3747832.3456696444, 13055793.148419775 3747827.438902212, 13055792.666892443 3747817.637188179, 13055792.06607077 3747812.765854766, 13055791.226947816 3747807.9298700104, 13055790.151545094 3747803.1408842215, 13055788.842453348 3747798.4104344863, 13055787.302826293 3747793.7499168725, 13055785.536373027 3747789.1705589755, 13055783.547349088 3747784.683392869, 13055781.34054621 3747780.2992285294, 13055778.921280775 3747776.0286277924, 13055776.295381006 3747771.8818789097, 13055773.469172923 3747767.8689717627, 13055770.44946511 3747763.9995737956, 13055767.243532311 3747760.283006727, 13055763.859097894 3747756.728224093, 13055760.30431526 3747753.343789676, 13055756.587748192 3747750.1378568755, 13055752.718350224 3747747.1181490635, 13055748.705443077 3747744.2919409815, 13055744.558694195 3747741.6660412117, 13055740.288093457 3747739.246775777, 13055735.903929118 3747737.0399728995, 13055731.416763011 3747735.0509489607, 13055726.837405114 3747733.2844956936, 13055722.176887501 3747731.7448686385, 13055717.446437765 3747730.4357768926, 13055712.657451976 3747729.3603741713, 13055707.82146722 3747728.521251215, 13055702.950133808 3747727.9204295445, 13055698.055187209 3747727.559356591, 13055693.148419775 3747727.438902212`
	ss := strings.Split(a, ", ")
	s := make([]string, 0)
	for _, v := range ss {
		x1 := strings.Split(v, " ")[0]
		y1 := strings.Split(v, " ")[1]
		s = append(s, coord.FromMercator(&coord.Point{Lng: gopsu.String2Float64(x1),
			Lat: gopsu.String2Float64(y1)}).String())
	}
	println(strings.Join(s, ", "))
	sx := `POLYGON ((13055693.148419775 3747727.438902212, 13055688.241652342 3747727.559356591, 13055683.346705742 3747727.9204295445, 13055678.47537233 3747728.521251215, 13055673.639387574 3747729.3603741713, 13055668.850401785 3747730.4357768926, 13055664.11995205 3747731.7448686385, 13055659.459434437 3747733.2844956936, 13055654.880076539 3747735.0509489607, 13055650.392910432 3747737.0399728995, 13055646.008746093 3747739.246775777, 13055641.738145355 3747741.6660412117, 13055637.591396473 3747744.2919409815, 13055633.578489326 3747747.1181490635, 13055629.709091358 3747750.1378568755, 13055625.99252429 3747753.343789676, 13055622.437741656 3747756.728224093, 13055619.053307239 3747760.283006727, 13055615.84737444 3747763.9995737956, 13055612.827666627 3747767.8689717627, 13055610.001458544 3747771.8818789097, 13055607.375558775 3747776.0286277924, 13055604.95629334 3747780.2992285294, 13055602.749490462 3747784.683392869, 13055600.760466523 3747789.1705589755, 13055598.994013257 3747793.7499168725, 13055597.454386203 3747798.4104344863, 13055596.145294456 3747803.1408842215, 13055595.069891734 3747807.9298700104, 13055594.23076878 3747812.765854766, 13055593.629947107 3747817.637188179, 13055593.268874155 3747822.5321347793, 13055593.148419775 3747827.438902212, 13055593.629947107 3747837.2406162447, 13055594.23076878 3747842.1119496576, 13055595.069891734 3747846.9479344133, 13055596.145294456 3747851.736920202, 13055597.454386203 3747856.4673699373, 13055598.994013257 3747861.127887551, 13055600.760466523 3747865.707245448, 13055602.749490462 3747870.194411555, 13055604.95629334 3747874.5785758942, 13055607.375558775 3747878.8491766313, 13055610.001458544 3747882.995925514, 13055612.827666627 3747887.008832661, 13055615.84737444 3747890.878230628, 13055619.053307239 3747894.5947976965, 13055622.437741656 3747898.1495803306, 13055625.99252429 3747901.5340147475, 13055629.709091358 3747904.739947548, 13055633.578489326 3747907.75965536, 13055637.591396473 3747910.585863442, 13055641.738145355 3747913.211763212, 13055646.008746093 3747915.6310286466, 13055650.392910432 3747917.837831524, 13055654.880076539 3747919.826855463, 13055659.459434437 3747921.59330873, 13055664.11995205 3747923.132935785, 13055668.850401785 3747924.442027531, 13055673.639387574 3747925.5174302524, 13055678.47537233 3747926.3565532085, 13055683.346705742 3747926.957374879, 13055688.241652342 3747927.3184478325, 13055693.148419775 3747927.438902212, 13055698.055187209 3747927.3184478325, 13055702.950133808 3747926.957374879, 13055707.82146722 3747926.3565532085, 13055712.657451976 3747925.5174302524, 13055717.446437765 3747924.442027531, 13055722.176887501 3747923.132935785, 13055726.837405114 3747921.59330873, 13055731.416763011 3747919.826855463, 13055735.903929118 3747917.837831524, 13055740.288093457 3747915.6310286466, 13055744.558694195 3747913.211763212, 13055748.705443077 3747910.585863442, 13055752.718350224 3747907.75965536, 13055756.587748192 3747904.739947548, 13055760.30431526 3747901.5340147475, 13055763.859097894 3747898.1495803306, 13055767.243532311 3747894.5947976965, 13055770.44946511 3747890.878230628, 13055773.469172923 3747887.008832661, 13055776.295381006 3747882.995925514, 13055778.921280775 3747878.8491766313, 13055781.34054621 3747874.5785758942, 13055783.547349088 3747870.194411555, 13055785.536373027 3747865.707245448, 13055787.302826293 3747861.127887551, 13055788.842453348 3747856.4673699373, 13055790.151545094 3747851.736920202, 13055791.226947816 3747846.9479344133, 13055792.06607077 3747842.1119496576, 13055792.666892443 3747837.2406162447, 13055793.027965395 3747832.3456696444, 13055793.148419775 3747827.438902212, 13055792.666892443 3747817.637188179, 13055792.06607077 3747812.765854766, 13055791.226947816 3747807.9298700104, 13055790.151545094 3747803.1408842215, 13055788.842453348 3747798.4104344863, 13055787.302826293 3747793.7499168725, 13055785.536373027 3747789.1705589755, 13055783.547349088 3747784.683392869, 13055781.34054621 3747780.2992285294, 13055778.921280775 3747776.0286277924, 13055776.295381006 3747771.8818789097, 13055773.469172923 3747767.8689717627, 13055770.44946511 3747763.9995737956, 13055767.243532311 3747760.283006727, 13055763.859097894 3747756.728224093, 13055760.30431526 3747753.343789676, 13055756.587748192 3747750.1378568755, 13055752.718350224 3747747.1181490635, 13055748.705443077 3747744.2919409815, 13055744.558694195 3747741.6660412117, 13055740.288093457 3747739.246775777, 13055735.903929118 3747737.0399728995, 13055731.416763011 3747735.0509489607, 13055726.837405114 3747733.2844956936, 13055722.176887501 3747731.7448686385, 13055717.446437765 3747730.4357768926, 13055712.657451976 3747729.3603741713, 13055707.82146722 3747728.521251215, 13055702.950133808 3747727.9204295445, 13055698.055187209 3747727.559356591, 13055693.148419775 3747727.438902212))`
	sxz := text2Geo(sx)
	for _, v := range sxz {
		println(fmt.Sprintf("%.12f %.12f", v.Lng, v.Lat))
	}
	println(gopsu.String2Float64("321212.123232"))
	println(gopsu.String2Int("", 10))
}

var (
	georep = strings.NewReplacer("(", "", ")", "", "POINT ", "", "POLYGON ", "", "LINESTRING ", "") // 经纬度字符串处理替换器
)

func text2Geo(s string) []*assetGeo {
	geostr := strings.Split(georep.Replace(s), ", ")
	gp := make([]*assetGeo, 0)
	for _, v := range geostr {
		vv := strings.Split(v, " ")
		gp = append(gp, &assetGeo{
			Lng: gopsu.String2Float64(vv[0]),
			Lat: gopsu.String2Float64(vv[1]),
		})
	}
	return gp
}

type assetGeo struct {
	Lng  float64 `json:"lng"`
	Lat  float64 `json:"lat"`
	Name string  `json:"aid,omitempty"`
}
